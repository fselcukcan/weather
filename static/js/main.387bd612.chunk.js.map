{"version":3,"sources":["logo.svg","config.js","utils/classname.js","components/Tab.js","components/Panel.js","components/Today.js","components/Future.js","components/Past.js","utils/libdate.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","config","OPENCAGEDATA_API_KEY","WEATHERBIT_API_KEY","cn","args","filter","Boolean","join","Tab","children","useTabState","onClick","isActive","className","Panel","usePanelState","Today","coords","useState","weather","setWeather","useEffect","a","key","lat","lng","fetch","response","ok","Error","json","data","console","error","getWeather","temp","app_temp","description","clouds","title","snow","precip","wind_cdir_full","wind_spd","pres","ob_time","Future","days","map","datum","i","valid_date","max_temp","min_temp","app_max_temp","app_min_temp","snow_depth","pop","Past","date","setDate","dayAfter","setDayAfter","e","preventDefault","daysToAdd","dateObj","Date","getDate","addDays","d","getFullYear","getMonth","formatDate","onSubmit","type","value","onChange","target","App","countries","setCountries","getCountries","selectedCountryName","setSelectedCountryName","selectedCapitalName","setSelectedCapitalName","selectedCountry","find","country","name","capital","capitalCoords","setCapitalCoords","capitals","results","geometry","getCapital","src","logo","alt","disabled","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.387bd612.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.658f99fd.svg\";","const config = {\n    OPENCAGEDATA_API_KEY: \"7a467f058a5a4027a6dda76056341592\",\n    WEATHERBIT_API_KEY: \"65a5936960f148fe8f2683ba60829f71\"\n}\n\nexport default config;","export const cn = (...args) => args.filter(Boolean).join(' ')\n","import React from 'react';\nimport { useTabState } from \"@bumaga/tabs\";\nimport { cn } from \"../utils/classname.js\";\n\nexport const Tab = ({ children }) => {\n    const { onClick, isActive } = useTabState();\n  \n    return <button onClick={onClick} className={cn('tab', isActive && 'active')}>{children}</button>;\n};\n  \n  ","import React from 'react';\nimport { usePanelState } from \"@bumaga/tabs\";\n\nexport const Panel = ({ children }) => {\n    const isActive = usePanelState();\n  \n    return isActive ? <div>{children}</div> : null;\n  };","import React, { useState, useEffect } from 'react';\nimport config from \"../config\";\n\nexport const Today = ({ coords }) => {\n    const [weather, setWeather] = useState();\n  \n    useEffect(() => {\n      async function getWeather(coords, key = config.WEATHERBIT_API_KEY) {\n        try {\n          const {lat, lng} = coords;\n          \n          const response = await fetch(`https://api.weatherbit.io/v2.0/current?lat=${lat}&lon=${lng}&key=${key}`);\n\n          if (!response.ok) {\n            throw new Error('Network response was not ok.');\n          }\n\n          const weather = await response.json();\n          setWeather(weather.data[0]);\n        } catch (error) {\n          console.error(error);\n        }\n      }\n      if (coords) {\n        getWeather(coords);\n      }\n    }, [coords]);\n      \n    return (\n      <div>\n        {weather\n          &&\n          <>\n            <div>{weather.temp} Celcius</div>\n            <div>feels like {weather.app_temp} Celcius</div>\n            <div>{weather.weather.description}</div>\n            <div>clouds: {weather.clouds}%</div>            \n            <div title=\"Accumulated snowfall\">snowfall: {weather.snow} mm</div>\n            <div title=\"Accumulated liquid equivalent precipitation\">precipitation: {weather.precip} mm</div>\n            <div>wind direction: {weather.wind_cdir_full}</div>\n            <div>wind speed: {weather.wind_spd} m/s</div>\n            <div>pressure: {weather.pres}</div>\n            <div>observation time: {weather.ob_time}</div>\n          </>\n        }\n      </div>\n    );\n  };\n  \n  \n  \n  ","import React, { useState, useEffect } from 'react';\nimport config from \"../config\";\n\nexport const Future = function({ coords, days }) {\n    const [weather, setWeather] = useState();\n  \n    useEffect(() => {\n      async function getWeather(coords, key = config.WEATHERBIT_API_KEY) {\n        try {\n          const {lat, lng} = coords;\n\n          const response = await fetch(`https://api.weatherbit.io/v2.0/forecast/daily?lat=${lat}&lon=${lng}&days=${days}&key=${key}`);\n\n          if (!response.ok) {\n            throw new Error('Network response was not ok.');\n          }\n\n          const weather = await response.json();\n          setWeather(weather);\n        } catch (error) {\n          console.error(error);\n        }\n      }\n      if (coords) {\n        getWeather(coords);\n      }\n    }, [coords, days]);\n      \n    return (\n      <div>\n        {weather\n          &&\n          weather.data.map((datum, i) => \n          <div key={i}>\n            <h3>{datum.valid_date}</h3>\n            <div>{datum.temp} Celcius</div>\n            <div>max/min: {datum.max_temp}/{datum.min_temp} Celcius</div>\n            <div>feels like max/min {datum.app_max_temp}/{datum.app_min_temp} Celcius</div>\n            <div>{datum.weather.description}</div>\n            <div>clouds: {datum.clouds}%</div>\n            <div title=\"Accumulated snowfall\">{datum.snow} mm</div>\n            <div>snow depth: {datum.snow_depth} mm</div>\n            <div>probability of precipitation: {datum.pop} %</div>\n            <div title=\"Accumulated liquid equivalent precipitation\">precipitation: {datum.precip} mm</div>\n            <div>wind direction: {datum.wind_cdir_full}</div>\n            <div>wind speed: {datum.wind_spd} m/s</div>\n            <div>pressure: {datum.pres} mb (milibar)</div>\n            <div>wind direction: {datum.wind_cdir_full}</div>\n            <div>wind speed: {datum.wind_spd} m/s</div>\n          </div>\n          )\n        }\n      </div>\n    );\n  }","import React, { useState, useEffect } from 'react';\nimport { formatDate, addDays } from \"../utils/libdate.js\";\nimport config from \"../config\";\n\nexport const Past = function({ coords }) {\n    const [date, setDate] = useState(\"\");\n    const [weather, setWeather] = useState();\n    \n    const [dayAfter, setDayAfter] = useState(\"\");\n  \n    useEffect(() => {\n      const dayAfter = addDays(date, 1);\n      setDayAfter(formatDate(dayAfter));\n    }, [date]);\n    \n    async function onSubmit (e) {\n      try {\n        e.preventDefault();\n        const {lat, lng} = coords;\n\n        const response = await fetch(`https://api.weatherbit.io/v2.0/history/daily?lat=${lat}&lon=${lng}&start_date=${date}&end_date=${dayAfter}&key=${config.WEATHERBIT_API_KEY}`);\n\n        if (!response.ok) {\n          throw new Error('Network response was not ok.');\n        }\n\n        const weather = await response.json();\n        setWeather(weather.data[0]);\n      } catch(error) {\n        console.error(error);\n      }\n    }\n    \n    return (\n      <>\n        <form onSubmit={onSubmit}>\n          <input type=\"date\" value={date} onChange={e => setDate(e.target.value)}/>\n          <input type=\"submit\" value=\"Submit\"/>\n        </form>\n  \n        <div>\n        {weather\n          &&\n          <>\n            <div>{weather.temp} Celcius</div>\n            <div>max/min: {weather.max_temp}/{weather.min_temp} Celcius</div>\n            <div title=\"[Satellite based] average cloud coverage\">clouds: {weather.clouds}%</div>\n            <div title=\"Accumulated snowfall\">snowfall: {weather.snow} mm</div>\n            <div>snow depth: {weather.snow_depth} mm</div>\n            <div title=\"Accumulated liquid equivalent precipitation\">precipitation: {weather.precip} mm</div>\n            <div>wind speed: {weather.wind_spd} m/s</div>\n            <div>pressure: {weather.pres} mb (milibar)</div>\n          </>\n        }\n      </div>\n      </>\n    );\n  }\n  ","export function formatDate (date) {\n    const d = new Date(date);\n    return `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`\n  }\n\nexport function addDays (date, daysToAdd) {\n    const dateObj = new Date(date);\n    return dateObj.setDate(dateObj.getDate() + daysToAdd);\n  };","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Tabs } from \"@bumaga/tabs\";\nimport config from \"./config\";\nimport {Tab, Panel, Today, Future, Past} from \"./components\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n\n  useEffect(() => {\n    async function getCountries () {\n      try {\n        const response = await fetch(\"https://restcountries.eu/rest/v2/all\");\n        if (!response.ok) {\n          throw new Error('Network response was not ok.');\n        }\n        const countries = await response.json();\n        setCountries(countries);\n      } catch (error) {\n        console.error(error);\n      }\n      \n    }\n    getCountries();\n  }, []);\n\n  const [selectedCountryName, setSelectedCountryName] = useState(\"\");\n\n  const [selectedCapitalName, setSelectedCapitalName] = useState();\n\n  useEffect(() => {\n    if (selectedCountryName) {\n      const selectedCountry = countries.find(country => country.name === selectedCountryName);\n      setSelectedCapitalName(selectedCountry.capital);\n    }\n  }, [selectedCountryName, countries]);\n\n  const [capitalCoords, setCapitalCoords] = useState();\n\n  useEffect(() => {\n    async function getCapital(selectedCapitalName, selectedCountryName, key = config.OPENCAGEDATA_API_KEY) {\n      try {\n        const response = await fetch(`https://api.opencagedata.com/geocode/v1/json?q=${selectedCapitalName},${selectedCountryName}&key=${key}`);\n\n        if (!response.ok) {\n          throw new Error('Network response was not ok.');\n        }\n\n        const capitals = await response.json();\n        const capitalCoords = capitals => capitals.results[0].geometry;\n        setCapitalCoords(capitalCoords(capitals));\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    if (selectedCapitalName && selectedCountryName) {\n      getCapital(selectedCapitalName, selectedCountryName);\n    }\n  }, [selectedCapitalName, selectedCountryName]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Select a country to get the weather data of today, this week, or a past date on coordinates of its capital city.\n        </p>\n\n        <select\n          value={selectedCountryName}\n          onChange={e => setSelectedCountryName(e.target.value)}\n          className=\"country-select\">\n          <option value=\"\" disabled>{\"Select a country\"}</option>\n          {\n            countries.map((country, i) => \n              (\n                <option\n                  value={country.name}\n                  key={i}>\n                    {country.name}\n                </option>\n              )\n            )\n          }\n        </select>\n        \n        <div>{selectedCapitalName}</div>\n\n        {capitalCoords &&\n        <Tabs>\n          <div>\n            <Tab>Today</Tab>\n            <Tab>This week</Tab>\n            <Tab>Past</Tab>\n          </div>\n\n          <Panel><Today coords={capitalCoords}></Today></Panel>\n          <Panel><Future coords={capitalCoords} days={7}></Future></Panel>\n          <Panel><Past coords={capitalCoords}></Past></Panel>\n        </Tabs>\n        }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n      // console.log(\"serviceWorker ready!\")\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}